"Included scalars"
scalar JSON
scalar Upload

"It will increment!"
type Counter {
  "Number of increments"
  count: Int!
  "Full message for testing"
  countStr: String
}

"A text message send by users"
type Message {
  id: ID!
  "Message content"
  text: String!
}

"Input from user to create a message"
input MessageInput {
  "Message content"
  text: String!
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

# Виды групп мышц
enum ExerciseMuscleGroup {
  LEGS
  HANDS
  BACK
  SHOULDERS
  CHEST
}

# Сущность тренажера
type TrainingApparatus {
  id: ID!
  title: String!
  description: String!
  cover: String
}

# Сущность упражнения
type Exercise {
  id: ID!
  title: String!
  description: String!
  trainingApparatus: TrainingApparatus!
  muscleGroup: ExerciseMuscleGroup
}

type WorkoutPart {
  id: ID!
  title: String!
  description: String!
  exercise: Exercise!
  weight: Float!
  repetitionsNumber: Int!
  sortOrder: Int!
  completed: Boolean!
  comment: String
}

type Workout {
  id: ID!
  title: String!
  description: String!
  workoutParts: [WorkoutPart]
  completed: Boolean!
  inProcess: Boolean!
  date: String!
}


type Query {
  "Test query with a parameter"
  hello(name: String): String!
  exercise(id: ID!): Exercise
  exercises: [Exercise]
  trainers: [TrainingApparatus]
  workouts: [Workout]!
  "List of messages sent by users"
  messages: [Message]
  uploads: [File]

}
type S {
  workoutPart: WorkoutPart!
}

type Mutation {
  createWorkoutPart(
    title: String!,
    description: String!,
    exercise: ID!,
    weight: Float,
    repetitionsNumber: Int,
    sortOrder: Int,
    completed: Boolean
  ): S!
  myMutation: String!
  "Add a message and publish it on 'messages' subscription channel"
  addMessage (input: MessageInput!): Message!
  singleUpload (file: Upload!): File!
  multipleUpload (files: [Upload!]!): [File!]!

}

type Subscription {
  mySub: String!
  "This will update every 2 seconds"
  counter: Counter!
  "When a new message is added"
  messageAdded: Message!

}
